package com.car.admin.test54;

/**
 * @program: demo-restful
 * @description:
 * @author: zhanyh
 * @create: 2019-09-29 13:13
 **/
public class TestMain {

    public static void main(String[] args) {
        /*

        代码当中体现多态性，其实就是一句话：父类引用指向子类对象。

        格式：

        父类名称 对象名 = new 子类名称();
        或者：

        接口名称 对象名 = new 实现类名称();

        访问成员变量的两种方式：

        1. 直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。
        2. 间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。

        在多态的代码当中，成员方法的访问规则是：

        看new的是谁，就优先用谁，没有则向上找。

        口诀：编译看左边，运行看右边。

        对比一下：

        成员变量：编译看左边，运行还看左边。

        成员方法：编译看左边，运行看右边。

        使用多态的好处:

        无论右边new的是那个子类对象, 左边都不会发生变化。

        提高代码的扩展性：

        可以将一个方法的形参定义为父类类型, 该方法就可以接受这个父类的任意子类对象了。
         */
        Fu fu = new Zi();//向上转型
        fu.test();// 父子都有，优先用子
        fu.role();// 子类没有，父类有，向上找到父类
        // 编译看左边，左边是Fu，Fu当中没有methodZi方法，所以编译报错。

        Zi zi = (Zi) fu;//向下转型
        zi.test();
        zi.role();
        zi.zi();
    }

}
